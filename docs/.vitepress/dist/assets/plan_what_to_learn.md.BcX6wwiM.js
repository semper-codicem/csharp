import{_ as a,c as i,o as t,ae as o}from"./chunks/framework.BD_Yrv4e.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"plan/what_to_learn.md","filePath":"plan/what_to_learn.md"}'),r={name:"plan/what_to_learn.md"};function n(l,e,s,c,d,m){return t(),i("div",null,[...e[0]||(e[0]=[o('<p>Hereâ€™s a structured roadmap of <strong>topics you should master to become an advanced .NET &amp; C# developer</strong>:</p><hr><h2 id="ðŸ”¹-1-core-c-language-deep-dive" tabindex="-1">ðŸ”¹ 1. <strong>Core C# Language (Deep Dive)</strong> <a class="header-anchor" href="#ðŸ”¹-1-core-c-language-deep-dive" aria-label="Permalink to &quot;ðŸ”¹ 1. **Core C# Language (Deep Dive)**&quot;">â€‹</a></h2><ul><li>Advanced Generics: constraints, covariance/contravariance, generic math (<code>INumber</code>).</li><li>Delegates, Events &amp; Expressions: expression trees, dynamic LINQ.</li><li>Reflection &amp; Metadata: <code>Type</code>, <code>Assembly</code>, <code>MethodInfo</code>, custom attributes.</li><li>Value Types vs Reference Types: stack vs heap, boxing/unboxing.</li><li>Memory &amp; Span: <code>Span&lt;T&gt;</code>, <code>Memory&lt;T&gt;</code>, <code>ReadOnlySpan&lt;T&gt;</code>, stackalloc.</li><li>Unsafe Code &amp; Pointers: fixed, stackalloc, interop scenarios.</li><li>Dynamic Features: <code>dynamic</code>, DLR, runtime binding.</li></ul><hr><h2 id="ðŸ”¹-2-net-runtime-internals" tabindex="-1">ðŸ”¹ 2. <strong>.NET Runtime &amp; Internals</strong> <a class="header-anchor" href="#ðŸ”¹-2-net-runtime-internals" aria-label="Permalink to &quot;ðŸ”¹ 2. **.NET Runtime &amp; Internals**&quot;">â€‹</a></h2><ul><li>CLR Execution Model: JIT, RyuJIT, Tiered Compilation, AOT (NativeAOT).</li><li>Garbage Collection: generations, LOH, GC tuning (<code>ServerGC</code>, <code>WorkstationGC</code>).</li><li>Assemblies &amp; IL: disassembling with ILDasm, ILSpy, dnSpy.</li><li>Threading Model: managed vs unmanaged threads, synchronization.</li><li>Performance Profiling: BenchmarkDotNet, dotTrace, PerfView.</li></ul><hr><h2 id="ðŸ”¹-3-asynchronous-parallel-programming" tabindex="-1">ðŸ”¹ 3. <strong>Asynchronous &amp; Parallel Programming</strong> <a class="header-anchor" href="#ðŸ”¹-3-asynchronous-parallel-programming" aria-label="Permalink to &quot;ðŸ”¹ 3. **Asynchronous &amp; Parallel Programming**&quot;">â€‹</a></h2><ul><li>Task Parallel Library (TPL).</li><li>async/await internals (state machine generation).</li><li>Synchronization primitives: <code>SemaphoreSlim</code>, <code>Monitor</code>, <code>ReaderWriterLockSlim</code>.</li><li>Channels &amp; Pipelines: <code>System.Threading.Channels</code>, <code>System.IO.Pipelines</code>.</li><li>Reactive Extensions (Rx.NET) &amp; Observables.</li></ul><hr><h2 id="ðŸ”¹-4-advanced-linq-data" tabindex="-1">ðŸ”¹ 4. <strong>Advanced LINQ &amp; Data</strong> <a class="header-anchor" href="#ðŸ”¹-4-advanced-linq-data" aria-label="Permalink to &quot;ðŸ”¹ 4. **Advanced LINQ &amp; Data**&quot;">â€‹</a></h2><ul><li>IQueryable vs IEnumerable.</li><li>Custom LINQ Providers.</li><li>Expression tree manipulation.</li><li>PLINQ (Parallel LINQ).</li><li>Advanced EF Core: interceptors, compiled queries, batching, shadow properties.</li></ul><hr><h2 id="ðŸ”¹-5-memory-performance-optimization" tabindex="-1">ðŸ”¹ 5. <strong>Memory, Performance &amp; Optimization</strong> <a class="header-anchor" href="#ðŸ”¹-5-memory-performance-optimization" aria-label="Permalink to &quot;ðŸ”¹ 5. **Memory, Performance &amp; Optimization**&quot;">â€‹</a></h2><ul><li>High-performance collections: <code>Memory&lt;T&gt;</code>, <code>ArrayPool&lt;T&gt;</code>, <code>ConcurrentDictionary</code>.</li><li>Struct optimizations: <code>readonly struct</code>, <code>ref struct</code>, <code>in</code> parameters.</li><li>ValueTask vs Task.</li><li>Span &amp; slicing operations.</li><li>Allocation-free coding patterns.</li><li>Caching strategies (in-memory, distributed).</li></ul><hr><h2 id="ðŸ”¹-6-advanced-oop-design" tabindex="-1">ðŸ”¹ 6. <strong>Advanced OOP &amp; Design</strong> <a class="header-anchor" href="#ðŸ”¹-6-advanced-oop-design" aria-label="Permalink to &quot;ðŸ”¹ 6. **Advanced OOP &amp; Design**&quot;">â€‹</a></h2><ul><li>SOLID &amp; Clean Architecture in real-world scenarios.</li><li>Dependency Injection (built-in DI, Autofac, Scrutor).</li><li>Aspect-Oriented Programming (AOP) with Castle DynamicProxy / DispatchProxy.</li><li>Domain-Driven Design (DDD).</li><li>Event Sourcing &amp; CQRS.</li></ul><hr><h2 id="ðŸ”¹-7-advanced-net-apis-ecosystem" tabindex="-1">ðŸ”¹ 7. <strong>Advanced .NET APIs &amp; Ecosystem</strong> <a class="header-anchor" href="#ðŸ”¹-7-advanced-net-apis-ecosystem" aria-label="Permalink to &quot;ðŸ”¹ 7. **Advanced .NET APIs &amp; Ecosystem**&quot;">â€‹</a></h2><ul><li>Reflection.Emit &amp; Dynamic Code Generation.</li><li>Source Generators &amp; Roslyn Compiler APIs.</li><li>Interop: P/Invoke, COM interop, calling unmanaged code.</li><li>Networking: <code>HttpClientFactory</code>, Sockets, gRPC.</li><li>Advanced serialization: <code>System.Text.Json</code>, custom converters, Span-based parsers.</li><li>Security: Claims-based auth, JWT, IdentityServer, data protection.</li></ul><hr><h2 id="ðŸ”¹-8-enterprise-grade-development" tabindex="-1">ðŸ”¹ 8. <strong>Enterprise-Grade Development</strong> <a class="header-anchor" href="#ðŸ”¹-8-enterprise-grade-development" aria-label="Permalink to &quot;ðŸ”¹ 8. **Enterprise-Grade Development**&quot;">â€‹</a></h2><ul><li>Distributed Caching: Redis, MemoryCache, NCache.</li><li>Messaging &amp; Eventing: RabbitMQ, Kafka, Azure Service Bus.</li><li>Microservices in .NET: gRPC, OData, REST APIs.</li><li>Observability: Logging, OpenTelemetry, Application Insights.</li><li>Cloud-native .NET: Containers, Kubernetes, Dapr.</li></ul><hr><h2 id="ðŸ”¹-9-tooling-ecosystem-mastery" tabindex="-1">ðŸ”¹ 9. <strong>Tooling &amp; Ecosystem Mastery</strong> <a class="header-anchor" href="#ðŸ”¹-9-tooling-ecosystem-mastery" aria-label="Permalink to &quot;ðŸ”¹ 9. **Tooling &amp; Ecosystem Mastery**&quot;">â€‹</a></h2><ul><li>Roslyn Analyzers: writing custom analyzers/code fixers.</li><li>MSBuild &amp; custom build tasks.</li><li>Source Generators (C# 9+).</li><li>.NET CLI in depth: <code>dotnet pack</code>, <code>dotnet publish</code>, custom tools.</li><li>Debugging: Visual Studio advanced debugging, WinDbg, SOS.</li></ul><hr><h2 id="ðŸ”¹-10-testing-quality" tabindex="-1">ðŸ”¹ 10. <strong>Testing &amp; Quality</strong> <a class="header-anchor" href="#ðŸ”¹-10-testing-quality" aria-label="Permalink to &quot;ðŸ”¹ 10. **Testing &amp; Quality**&quot;">â€‹</a></h2><ul><li>xUnit, NUnit, MSTest (advanced usage).</li><li>Mocking frameworks: Moq, NSubstitute.</li><li>Property-based testing: FsCheck.</li><li>Performance &amp; Load testing.</li><li>Contract testing (Pact.NET).</li></ul><hr><h2 id="ðŸ”¹-11-cross-platform-future-net" tabindex="-1">ðŸ”¹ 11. <strong>Cross-Platform &amp; Future .NET</strong> <a class="header-anchor" href="#ðŸ”¹-11-cross-platform-future-net" aria-label="Permalink to &quot;ðŸ”¹ 11. **Cross-Platform &amp; Future .NET**&quot;">â€‹</a></h2><ul><li>.NET MAUI: building desktop/mobile apps.</li><li>Blazor: WASM + Server.</li><li>NativeAOT &amp; trimming.</li><li>WASI (WebAssembly System Interface) for .NET.</li></ul><hr><p>âœ… <strong>Final Tip</strong>: To <em>really</em> become advanced, donâ€™t just learn <strong>what</strong> C#/.NET can doâ€”study <strong>how</strong> the compiler and runtime implement features. Explore <code>dotnet/runtime</code> and <code>roslyn</code> source code on GitHub. Thatâ€™s where the deepest insights come from.</p><hr>',37)])])}const g=a(r,[["render",n]]);export{u as __pageData,g as default};
