import{_ as a,c as r,o as i,ae as t}from"./chunks/framework.BD_Yrv4e.js";const p=JSON.parse('{"title":"Lerning Plan to Become an Advanced C#/.NET Developer","description":"","frontmatter":{},"headers":[],"relativePath":"plan/learning_plan.md","filePath":"plan/learning_plan.md"}'),o={name:"plan/learning_plan.md"};function n(l,e,s,c,d,h){return i(),r("div",null,[...e[0]||(e[0]=[t('<h1 id="lerning-plan-to-become-an-advanced-c-net-developer" tabindex="-1">Lerning Plan to Become an Advanced C#/.NET Developer <a class="header-anchor" href="#lerning-plan-to-become-an-advanced-c-net-developer" aria-label="Permalink to &quot;Lerning Plan to Become an Advanced C#/.NET Developer&quot;">​</a></h1><hr><h1 id="🧭-phase-1-language-mastery-2–3-weeks" tabindex="-1">🧭 Phase 1: <strong>Language Mastery (2–3 weeks)</strong> <a class="header-anchor" href="#🧭-phase-1-language-mastery-2–3-weeks" aria-label="Permalink to &quot;🧭 Phase 1: **Language Mastery (2–3 weeks)**&quot;">​</a></h1><h2 id="🔹-topics" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li><code>Span&lt;T&gt;</code>, <code>Memory&lt;T&gt;</code>, <code>ref</code>, <code>in</code>, <code>ref struct</code></li><li>Nullable reference types (<code>#nullable enable</code>)</li><li>Source generators</li><li>Expression trees</li><li>Unsafe code &amp; pointers</li></ul><h2 id="📘-learn" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/" target="_blank" rel="noreferrer">C# Language Reference (docs.microsoft.com)</a></li><li><a href="https://devblogs.microsoft.com/dotnet/understanding-span-usage-csharp/" target="_blank" rel="noreferrer">Span and Memory in .NET</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview" target="_blank" rel="noreferrer">Source Generators Tutorial</a></li></ul><h2 id="🧪-practice" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Implement your own <code>StringBuilder</code> using <code>Span&lt;T&gt;</code> and <code>ArrayPool&lt;T&gt;</code></li><li>Write a source generator that adds logging to methods</li><li>Explore pointers by writing an unsafe matrix multiplication method</li></ul><h2 id="📦-mini-project" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;SafeBuffer&quot;</strong> – A memory-efficient buffer wrapper using <code>Span&lt;T&gt;</code>, custom allocation, and pooling</p><hr><h1 id="🚀-phase-2-clr-runtime-internals-2–3-weeks" tabindex="-1">🚀 Phase 2: <strong>CLR &amp; Runtime Internals (2–3 weeks)</strong> <a class="header-anchor" href="#🚀-phase-2-clr-runtime-internals-2–3-weeks" aria-label="Permalink to &quot;🚀 Phase 2: **CLR &amp; Runtime Internals (2–3 weeks)**&quot;">​</a></h1><h2 id="🔹-topics-1" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-1" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li>JIT, IL, GC internals</li><li>Assembly loading &amp; metadata</li><li>Reflection, custom attributes</li></ul><h2 id="📘-learn-1" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-1" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><em>CLR via C#</em> by Jeffrey Richter (focus on chapters on memory, GC, and execution)</li><li><a href="https://github.com/icsharpcode/ILSpy" target="_blank" rel="noreferrer">ILSpy or dnSpy</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/" target="_blank" rel="noreferrer">GC Documentation</a></li></ul><h2 id="🧪-practice-1" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice-1" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Use <code>ildasm</code> to inspect IL from different C# features</li><li>Use reflection to create an object at runtime and invoke private methods</li></ul><h2 id="📦-mini-project-1" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-1" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;DynamicCommandExecutor&quot;</strong> – CLI app that loads assemblies at runtime, discovers command classes via attributes, and executes them dynamically.</p><hr><h1 id="🧱-phase-3-advanced-asp-net-core-3–4-weeks" tabindex="-1">🧱 Phase 3: <strong>Advanced ASP.NET Core (3–4 weeks)</strong> <a class="header-anchor" href="#🧱-phase-3-advanced-asp-net-core-3–4-weeks" aria-label="Permalink to &quot;🧱 Phase 3: **Advanced ASP.NET Core (3–4 weeks)**&quot;">​</a></h1><h2 id="🔹-topics-2" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-2" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li>Middleware, filters, DI internals</li><li>Minimal APIs vs. MVC</li><li>SignalR &amp; gRPC</li><li>Advanced model binding</li></ul><h2 id="📘-learn-2" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-2" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/" target="_blank" rel="noreferrer">ASP.NET Core Fundamentals</a></li><li><a href="https://learn.microsoft.com/en-us/aspnet/core/grpc/" target="_blank" rel="noreferrer">gRPC for ASP.NET Core</a></li><li><a href="https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction" target="_blank" rel="noreferrer">SignalR Overview</a></li></ul><h2 id="🧪-practice-2" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice-2" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Create a custom middleware for request/response logging</li><li>Build a SignalR-based real-time chat</li><li>Add gRPC services for high-performance communication</li></ul><h2 id="📦-mini-project-2" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-2" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;MicroAPI Hub&quot;</strong> – A modular web API app with endpoints served from dynamically loaded plugins, using minimal APIs and custom DI scopes.</p><hr><h1 id="🧠-phase-4-design-architecture-3–4-weeks" tabindex="-1">🧠 Phase 4: <strong>Design &amp; Architecture (3–4 weeks)</strong> <a class="header-anchor" href="#🧠-phase-4-design-architecture-3–4-weeks" aria-label="Permalink to &quot;🧠 Phase 4: **Design &amp; Architecture (3–4 weeks)**&quot;">​</a></h1><h2 id="🔹-topics-3" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-3" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li>DDD, Onion Architecture</li><li>MediatR patterns, CQRS</li><li>Repository/Unit of Work (when &amp; when not to use)</li></ul><h2 id="📘-learn-3" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-3" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://github.com/jasontaylordev/CleanArchitecture" target="_blank" rel="noreferrer">Clean Architecture with .NET Core (Jason Taylor)</a></li><li><a href="https://github.com/jbogard/MediatR" target="_blank" rel="noreferrer">MediatR GitHub</a></li></ul><h2 id="🧪-practice-3" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice-3" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Design aggregates, value objects, and entities for an e-commerce app</li><li>Implement CQRS using MediatR and validation pipeline behaviors</li></ul><h2 id="📦-mini-project-3" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-3" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;DomainShop&quot;</strong> – E-commerce domain using clean architecture with full DDD practices and CQRS separation</p><hr><h1 id="🔄-phase-5-concurrency-async-and-performance-2–3-weeks" tabindex="-1">🔄 Phase 5: <strong>Concurrency, Async, and Performance (2–3 weeks)</strong> <a class="header-anchor" href="#🔄-phase-5-concurrency-async-and-performance-2–3-weeks" aria-label="Permalink to &quot;🔄 Phase 5: **Concurrency, Async, and Performance (2–3 weeks)**&quot;">​</a></h1><h2 id="🔹-topics-4" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-4" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li><code>async/await</code>, <code>ConfigureAwait</code>, <code>ValueTask</code></li><li><code>System.IO.Pipelines</code>, Channels</li><li>Benchmarking</li></ul><h2 id="📘-learn-4" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-4" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/" target="_blank" rel="noreferrer">Asynchronous Programming Best Practices</a></li><li><a href="https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/" target="_blank" rel="noreferrer">Pipelines Overview</a></li></ul><h2 id="🧪-practice-4" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice-4" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Rewrite a file processor using <code>Pipelines</code></li><li>Use <code>BenchmarkDotNet</code> to compare <code>Task</code> vs <code>ValueTask</code></li></ul><h2 id="📦-mini-project-4" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-4" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;PipeCrawler&quot;</strong> – A high-performance web scraper using <code>Pipelines</code>, <code>Channels</code>, and async streaming</p><hr><h1 id="📊-phase-6-diagnostics-profiling-and-tooling-2–3-weeks" tabindex="-1">📊 Phase 6: <strong>Diagnostics, Profiling, and Tooling (2–3 weeks)</strong> <a class="header-anchor" href="#📊-phase-6-diagnostics-profiling-and-tooling-2–3-weeks" aria-label="Permalink to &quot;📊 Phase 6: **Diagnostics, Profiling, and Tooling (2–3 weeks)**&quot;">​</a></h1><h2 id="🔹-topics-5" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-5" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li>BenchmarkDotNet</li><li>Logging (Serilog, NLog)</li><li>dotTrace, PerfView</li><li>Roslyn analyzers &amp; custom rules</li></ul><h2 id="📘-learn-5" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-5" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://www.jetbrains.com/dotmemory/" target="_blank" rel="noreferrer">dotMemory and dotTrace</a></li><li><a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview" target="_blank" rel="noreferrer">Roslyn Analyzers Tutorial</a></li></ul><h2 id="🧪-practice-5" tabindex="-1">🧪 Practice <a class="header-anchor" href="#🧪-practice-5" aria-label="Permalink to &quot;🧪 Practice&quot;">​</a></h2><ul><li>Write a custom Roslyn analyzer to enforce a coding guideline</li><li>Use dotTrace to identify bottlenecks in previous projects</li></ul><h2 id="📦-mini-project-5" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-5" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;AnalyzerPack&quot;</strong> – A NuGet package with Roslyn analyzers and code fixes for common enterprise conventions</p><hr><h1 id="🌐-phase-7-devops-deployment-distributed-systems-optional-advanced" tabindex="-1">🌐 Phase 7: <strong>DevOps, Deployment &amp; Distributed Systems (Optional/Advanced)</strong> <a class="header-anchor" href="#🌐-phase-7-devops-deployment-distributed-systems-optional-advanced" aria-label="Permalink to &quot;🌐 Phase 7: **DevOps, Deployment &amp; Distributed Systems (Optional/Advanced)**&quot;">​</a></h1><h2 id="🔹-topics-6" tabindex="-1">🔹 Topics <a class="header-anchor" href="#🔹-topics-6" aria-label="Permalink to &quot;🔹 Topics&quot;">​</a></h2><ul><li>Dockerizing .NET apps</li><li>Azure/AWS deployment</li><li>Orleans or Akka.NET</li><li>OpenTelemetry tracing</li></ul><h2 id="📘-learn-6" tabindex="-1">📘 Learn <a class="header-anchor" href="#📘-learn-6" aria-label="Permalink to &quot;📘 Learn&quot;">​</a></h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/orleans/" target="_blank" rel="noreferrer">Microsoft Orleans</a></li><li><a href="https://opentelemetry.io/docs/instrumentation/net/" target="_blank" rel="noreferrer">OpenTelemetry for .NET</a></li></ul><h2 id="📦-mini-project-6" tabindex="-1">📦 Mini Project <a class="header-anchor" href="#📦-mini-project-6" aria-label="Permalink to &quot;📦 Mini Project&quot;">​</a></h2><p><strong>&quot;OrleansMonitor&quot;</strong> – Distributed background job runner using virtual actors + OpenTelemetry tracing and Grafana dashboard</p><hr><h2 id="🧩-final-capstone-project-1–2-months" tabindex="-1">🧩 Final Capstone Project (1–2 months) <a class="header-anchor" href="#🧩-final-capstone-project-1–2-months" aria-label="Permalink to &quot;🧩 Final Capstone Project (1–2 months)&quot;">​</a></h2><h3 id="💡-build-a-complete-enterprise-ready-saas" tabindex="-1">💡 Build a complete enterprise-ready SaaS: <a class="header-anchor" href="#💡-build-a-complete-enterprise-ready-saas" aria-label="Permalink to &quot;💡 Build a complete enterprise-ready SaaS:&quot;">​</a></h3><ul><li>ASP.NET Core backend (Modular, DI, CQRS)</li><li>Admin dashboard (Blazor or React frontend)</li><li>SignalR-based real-time notifications</li><li>Plugin-based microservice architecture</li><li>Containerized deployment (Docker + GitHub Actions)</li></ul><hr>',74)])])}const m=a(o,[["render",n]]);export{p as __pageData,m as default};
