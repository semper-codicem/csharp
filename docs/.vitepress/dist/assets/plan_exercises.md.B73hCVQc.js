import{_ as r,c as t,o as i,ae as s}from"./chunks/framework.BD_Yrv4e.js";const h=JSON.parse('{"title":"üåü C# / .NET Mastery Roadmap","description":"","frontmatter":{},"headers":[],"relativePath":"plan/exercises.md","filePath":"plan/exercises.md"}'),o={name:"plan/exercises.md"};function a(n,e,l,c,p,d){return i(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="üåü-c-net-mastery-roadmap" tabindex="-1">üåü C# / .NET Mastery Roadmap <a class="header-anchor" href="#üåü-c-net-mastery-roadmap" aria-label="Permalink to &quot;üåü C# / .NET Mastery Roadmap&quot;">‚Äã</a></h1><hr><h2 id="phase-1-deepen-core-c-knowledge-3‚Äì4-weeks" tabindex="-1"><strong>Phase 1: Deepen Core C# Knowledge (3‚Äì4 weeks)</strong> <a class="header-anchor" href="#phase-1-deepen-core-c-knowledge-3‚Äì4-weeks" aria-label="Permalink to &quot;**Phase 1: Deepen Core C# Knowledge (3‚Äì4 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Move beyond ‚Äúworking knowledge‚Äù into <strong>language internals</strong>.</p><p><strong>Topics:</strong></p><ul><li>Advanced generics (constraints, variance).</li><li>Delegates, events, expression trees.</li><li>Value types vs reference types (stack vs heap).</li><li>Memory &amp; Span (<code>Span&lt;T&gt;</code>, <code>Memory&lt;T&gt;</code>).</li><li>Unsafe code &amp; pointers.</li></ul><p><strong>Exercises:</strong></p><ul><li>Implement a <strong>generic cache</strong> with constraints.</li><li>Build a LINQ-like <strong>mini query provider</strong> using expression trees.</li><li>Use <code>Span&lt;T&gt;</code> to parse CSV strings without allocations.</li></ul><p><strong>Project:</strong> Write a <strong>high-performance CSV parser</strong> library that can read millions of rows using <code>Span&lt;T&gt;</code> and <code>ArrayPool&lt;T&gt;</code>. Benchmark with BenchmarkDotNet.</p><hr><h2 id="phase-2-clr-il-runtime-internals-4‚Äì6-weeks" tabindex="-1"><strong>Phase 2: CLR, IL &amp; Runtime Internals (4‚Äì6 weeks)</strong> <a class="header-anchor" href="#phase-2-clr-il-runtime-internals-4‚Äì6-weeks" aria-label="Permalink to &quot;**Phase 2: CLR, IL &amp; Runtime Internals (4‚Äì6 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Understand how your C# code actually executes under the hood.</p><p><strong>Topics:</strong></p><ul><li>CLR execution, JIT, Tiered Compilation, NativeAOT.</li><li>Garbage Collection internals.</li><li>Assemblies, IL, reflection.</li><li>Benchmarking &amp; profiling.</li><li>Threading model.</li></ul><p><strong>Exercises:</strong></p><ul><li>Disassemble simple methods with ILDasm.</li><li>Compare <code>struct</code> vs <code>class</code> in memory allocations (PerfView).</li><li>Benchmark <code>List&lt;T&gt;</code> vs <code>Span&lt;T&gt;</code> parsing.</li><li>Write a simple <strong>reflection-based serializer</strong>.</li></ul><p><strong>Project:</strong> Build a <strong>mini performance profiler</strong> that times methods via <code>DispatchProxy</code> or IL weaving. Compare results with BenchmarkDotNet.</p><hr><h2 id="phase-3-asynchrony-parallelism-3‚Äì5-weeks" tabindex="-1"><strong>Phase 3: Asynchrony &amp; Parallelism (3‚Äì5 weeks)</strong> <a class="header-anchor" href="#phase-3-asynchrony-parallelism-3‚Äì5-weeks" aria-label="Permalink to &quot;**Phase 3: Asynchrony &amp; Parallelism (3‚Äì5 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Master async/await, TPL, and concurrency at scale.</p><p><strong>Topics:</strong></p><ul><li>async/await state machine internals.</li><li>Task Parallel Library.</li><li>Synchronization primitives.</li><li>Channels &amp; Pipelines.</li><li>Reactive Extensions.</li></ul><p><strong>Exercises:</strong></p><ul><li>Implement your own <strong>Task scheduler</strong>.</li><li>Use <code>SemaphoreSlim</code> to throttle concurrent API calls.</li><li>Build a producer/consumer pipeline with <code>System.Threading.Channels</code>.</li></ul><p><strong>Project:</strong> Create a <strong>real-time stock ticker</strong> app:</p><ul><li>Fetch live data.</li><li>Use pipelines for processing.</li><li>Push updates to subscribers using Rx.NET.</li></ul><hr><h2 id="phase-4-advanced-architecture-patterns-6‚Äì8-weeks" tabindex="-1"><strong>Phase 4: Advanced Architecture &amp; Patterns (6‚Äì8 weeks)</strong> <a class="header-anchor" href="#phase-4-advanced-architecture-patterns-6‚Äì8-weeks" aria-label="Permalink to &quot;**Phase 4: Advanced Architecture &amp; Patterns (6‚Äì8 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Apply advanced design to enterprise systems.</p><p><strong>Topics:</strong></p><ul><li>Clean Architecture &amp; SOLID in depth.</li><li>DDD, CQRS, Event Sourcing.</li><li>Dependency Injection (built-in, Autofac).</li><li>AOP with proxies.</li><li>Source Generators &amp; Roslyn.</li></ul><p><strong>Exercises:</strong></p><ul><li>Refactor a simple CRUD API into Clean Architecture layers.</li><li>Implement a CQRS command/query separation in an app.</li><li>Write a <strong>source generator</strong> to auto-implement DTO ‚Üí Entity mapping.</li></ul><p><strong>Project:</strong> Develop a <strong>modular e-commerce API</strong>:</p><ul><li>Orders, payments, users.</li><li>CQRS for reads/writes.</li><li>Event sourcing for order history.</li><li>Pluggable architecture with DI.</li></ul><hr><h2 id="phase-5-advanced-data-linq-3‚Äì4-weeks" tabindex="-1"><strong>Phase 5: Advanced Data &amp; LINQ (3‚Äì4 weeks)</strong> <a class="header-anchor" href="#phase-5-advanced-data-linq-3‚Äì4-weeks" aria-label="Permalink to &quot;**Phase 5: Advanced Data &amp; LINQ (3‚Äì4 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Push LINQ and EF Core to expert level.</p><p><strong>Topics:</strong></p><ul><li>IQueryable vs IEnumerable.</li><li>Writing custom LINQ providers.</li><li>Compiled queries in EF Core.</li><li>Expression tree manipulation.</li></ul><p><strong>Exercises:</strong></p><ul><li>Build a <strong>LINQ provider</strong> that translates to SQL-like strings.</li><li>Optimize EF Core queries with compiled queries.</li><li>Write a <strong>query pipeline</strong> with expression trees.</li></ul><p><strong>Project:</strong> Create a <strong>custom in-memory LINQ engine</strong>:</p><ul><li>Supports <code>Where</code>, <code>Select</code>, <code>OrderBy</code>.</li><li>Executes queries over JSON datasets.</li></ul><hr><h2 id="phase-6-systems-programming-interop-4‚Äì6-weeks" tabindex="-1"><strong>Phase 6: Systems Programming &amp; Interop (4‚Äì6 weeks)</strong> <a class="header-anchor" href="#phase-6-systems-programming-interop-4‚Äì6-weeks" aria-label="Permalink to &quot;**Phase 6: Systems Programming &amp; Interop (4‚Äì6 weeks)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Work with low-level .NET features.</p><p><strong>Topics:</strong></p><ul><li>P/Invoke and native interop.</li><li>Unsafe code and fixed buffers.</li><li>Reflection.Emit and dynamic code gen.</li><li>Networking: sockets, pipelines, gRPC.</li></ul><p><strong>Exercises:</strong></p><ul><li>Call a C library function from C# using P/Invoke.</li><li>Implement a memory pool with unsafe code.</li><li>Build a gRPC server and client with streaming.</li></ul><p><strong>Project:</strong> Write a <strong>high-performance TCP chat server</strong>:</p><ul><li>Socket-based.</li><li>Uses Pipelines for zero-copy reads.</li><li>Benchmark vs Kestrel.</li></ul><hr><h2 id="phase-7-enterprise-grade-net-ongoing-2‚Äì3-months" tabindex="-1"><strong>Phase 7: Enterprise-Grade .NET (Ongoing, 2‚Äì3 months)</strong> <a class="header-anchor" href="#phase-7-enterprise-grade-net-ongoing-2‚Äì3-months" aria-label="Permalink to &quot;**Phase 7: Enterprise-Grade .NET (Ongoing, 2‚Äì3 months)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Become production-ready at scale.</p><p><strong>Topics:</strong></p><ul><li>Distributed caching (Redis, NCache).</li><li>Messaging (RabbitMQ, Kafka).</li><li>Observability (OpenTelemetry, logging, metrics).</li><li>Microservices in .NET.</li><li>Cloud-native: containers, Kubernetes.</li></ul><p><strong>Exercises:</strong></p><ul><li>Add Redis caching to your e-commerce API.</li><li>Stream order events to Kafka.</li><li>Add OpenTelemetry tracing.</li></ul><p><strong>Project:</strong> Deploy your <strong>modular e-commerce API</strong> as a <strong>microservice system</strong>:</p><ul><li>Multiple services (Orders, Payments, Users).</li><li>Communicate over gRPC or Kafka.</li><li>Deploy to Kubernetes.</li></ul><hr><h2 id="phase-8-expert-level-never-ending-mastery" tabindex="-1"><strong>Phase 8: Expert Level (Never-ending mastery)</strong> <a class="header-anchor" href="#phase-8-expert-level-never-ending-mastery" aria-label="Permalink to &quot;**Phase 8: Expert Level (Never-ending mastery)**&quot;">‚Äã</a></h2><p><strong>Goal:</strong> Be able to <strong>debug, optimize, and design systems like a .NET architect</strong>.</p><p><strong>Activities:</strong></p><ul><li>Contribute to open source (<code>dotnet/runtime</code>, <code>roslyn</code>).</li><li>Read CLR via C# (by Jeffrey Richter).</li><li>Explore .NET internals blogs &amp; GitHub repos.</li><li>Mentor juniors, do code reviews.</li><li>Build real-world OSS libraries.</li></ul><hr><h1 id="üîë-how-to-study" tabindex="-1">üîë How to Study <a class="header-anchor" href="#üîë-how-to-study" aria-label="Permalink to &quot;üîë How to Study&quot;">‚Äã</a></h1><ol><li><strong>Daily</strong>: 1‚Äì2 hrs of focused study + coding.</li><li><strong>Weekly</strong>: One deep-dive blog post / source code exploration.</li><li><strong>Monthly</strong>: Build one project applying your new knowledge.</li><li><strong>Long-term</strong>: Contribute to OSS / write your own advanced library.</li></ol><hr>',71)])])}const u=r(o,[["render",a]]);export{h as __pageData,u as default};
